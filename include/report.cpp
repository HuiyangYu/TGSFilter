#include <iostream>
#include <fstream>
#include <string>
#include <cstring>
#include <functional>
#include <vector>
#include <type_traits>
#include <regex>
#include <iomanip>
#include <chrono>
#include <ctime>
#include "report.h"
#include "echart_js.cpp"

using namespace std;

// 将数字向量转为json array
template <typename T>
string vectorNumToJson(const vector<T> &vec)
{
    stringstream ss;
    ss << "[";
    for (size_t i = 0; i < vec.size(); ++i)
    {
        ss << vec[i];
        if (i < vec.size() - 1)
        {
            ss << ",";
        }
    }
    ss << "]";
    return ss.str();
}

void genHTMLStyle(ofstream &ofs)
{
    ofs << R"(<style type="text/css">
    h1 {
        padding: 20px 10px;
        background: skyblue;
    }
    h1 a {
        color: white;
    }
    #footer {
        padding: 20px 10px;
        background: skyblue;
        font-size: 20px;        
    }
    .container {
      padding: 20px;
    }
    .level-2-title {
        margin: 20px 0;
        font-size: 28px;
        font-weight: bold;
        color: rgb(46, 163, 209);
    }

    .plots-container {
        display: flex;
        flex-direction: row;
        /* align-items: center; */
        flex-wrap: wrap;
        padding: 20px 0;
    }

    .plots-container>.plot:first-child {
        margin-right: 40px;
    }

    .plot {
        width: 650px;
        height: 400px;
    }

    table td {
        text-align: center;
        border: 1px solid black;
    }

    table td:first-child {
        width: 180px;
    }

    table td:not(:first-child) {
        width: 200px;
    }

    .table-title {
        background-color: skyblue;
    }
  </style>)";
}

std::string getNowTime()
{
    auto now = std::chrono::system_clock::now();
    std::time_t now_time = std::chrono::system_clock::to_time_t(now);
    char buffer[80];
    std::strftime(buffer, sizeof(buffer), "%Y-%m-%d %H:%M:%S", std::localtime(&now_time));
    return std::string(buffer);
}

void genHTMLFooter(ofstream &ofs)
{
    ofs << "<div id=\"footer\">";
    ofs << "    <p>Generated by <a href=\"https://github.com/HuiyangYu/TGSFilter\" target=\"blank\">TGSFilter (v1.11)</a> at " << getNowTime() << "</p>";
    ofs << "</div>";
}

void genBaseJsScript(ofstream &ofs)
{
    ofs << R"(<script>
    const defaultOptions = {
        toolbox: {
            feature: {
                dataZoom: {
                    yAxisIndex: false
                },
                saveAsImage: {
                    show: false,
                    excludeComponents: ['toolbox', 'dataZoom', 'title']
                },
                mySave: {
                    show: true,
                    title: 'Save as image',
                    icon: 'path://M939.6 655.5c-12.2 0-20.4 8.1-20.4 20.4v122.2c0 22.4-16.3 40.7-40.7 40.7h-733c-22.4 0-40.7-18.3-40.7-40.7V675.9c0-12.2-8.1-20.4-20.4-20.4S64 663.7 64 675.9v122.2c0 44.8 34.6 81.5 81.5 81.5h733.1c44.8 0 81.5-36.7 81.5-81.5V675.9c-0.1-12.2-8.2-20.4-20.5-20.4zM455 702.4c16.3 16.3 36.7 24.4 57 24.4 20.4 0 42.8-8.1 57-24.4l205.7-205.7c8.1-8.1 8.1-20.4 0-28.5s-20.4-8.1-28.5 0L540.5 673.8c-2 2-6.1 4.1-8.1 6.1V105.7c0-12.2-8.1-20.4-20.4-20.4-12.2 0-20.4 8.1-20.4 20.4V680c-2-2-6.1-4.1-8.1-6.1L277.8 468.2c-8.1-8.1-20.4-8.1-28.5 0-8.1 8.1-8.1 20.4 0 28.5L455 702.4z',
                    onclick: function (_, echart){
                        const base64 = echart.getDataURL({
                            pixelRatio: 300 / 72,
                            backgroundColor: 'white',
                            type: 'png',
                            excludeComponents: ['toolbox', 'dataZoom', 'title']
                        })
                        const title = `${echart.getDom().dataset.title}_${echart.getOption().title[0].text}.png`
                        const newBase64 = changeDpiDataUrl(base64, 300)
                        const bstr = atob(newBase64.split(',')[1])
                        let n = bstr.length
                        const u8Arr = new Uint8Array(n)
                        while(n--) {
                            u8Arr[n] = bstr.charCodeAt(n)
                        }
                        const blob = new Blob([u8Arr], {type: 'image/png'})
                        const aLink = document.createElement('a')
                        aLink.style.display = 'none'
                        aLink.href = URL.createObjectURL(blob)
                        aLink.download = title.replace(/ /g, '_')
                        document.body.appendChild(aLink)
                        aLink.click()
                        URL.revokeObjectURL(aLink.href)
                        document.body.removeChild(aLink)
                    }
                },
                dataView: { readOnly: true },
                restore: {},
            }
        },
        dataZoom: [
            {
                type: 'inside'
            },
            {
                type: 'slider'
            }
        ],
    }
    const axisTextStyle = {
        nameLocation: 'center',
        nameTextStyle: {
            fontSize: 16,
            color: 'black',
        },
        splitArea: {
            show: false,
        },
        lineStyle: {
            color: 'black',
        },
        axisTick: {
            lineStyle: {
                color: 'black',
            }
        },
        axisLabel: {
            color: 'black',
        }
    }
    const plotTitleStyle = {
        left: 10,
        textStyle: {
            color: 'black',
        }
    }
    const formatNum = (realVal) => {
        let rVal = '' + Math.floor(realVal)
        if (realVal % 10 === 0) {
            if (realVal % 1000 === 0 && realVal >= 1000) {
                rVal = Math.floor((realVal / 1000)) + 'k'
            }
            if (realVal % 1000000 === 0 && realVal >= 1000000) {
                rVal = Math.floor((realVal / 1000000)) + 'M'
            }
        }
        return rVal
    }
    const renderMultLineChart = (echart, id, data) => {
        const domData = echart.getDom().dataset
          // 指定图表的配置项和数据Ï
        const option = {
            ...defaultOptions,
            title: {
                ...plotTitleStyle,
                text : domData.plotTitle,
            },
            color: ['#91cc75', '#5470c6', '#fac858', '#ee6666', '#73c0de', '#3ba272', '#fc8452', '#9a60b4', '#ea7ccc'],
            tooltip: {
                trigger : "axis",
            },
            legend: {
                orient : "verticalAlign",
                right : 0,
                top : 50,
                icon : 'rect',
                itemHeight : 2,
                data : data.y.map(item => item.name),
            },
            grid: {
                left : 40,
                right : id.includes("ReadsQual") ? 85 : 65,
                bottom : 80,
                containLabel : true,
            },
            xAxis: {
                ... axisTextStyle,
                name: domData.plotXTitle,
                nameGap: 30,
                type: "category",
                boundaryGap: false,
                data: data.x,
            },
            yAxis: {
                ... axisTextStyle,
                name: domData.plotYTitle,
                type: "value",
                nameGap: data.yTitleGap,
                axisLine: {
                    show: true,
                },
                axisTick: {
                    show: true,
                    inslide: false,
                },
            },
            series: data.y.map((item, index) => {
                return {
                    name: item.name,
                    type: "line",
                    data: item.data,
                    lineStyle: {
                        width: 2
                    },
                    showSymbol: false,
                }})
          };
        // 使用刚指定的配置项和数据显示图表。
        echart.setOption(option);
    }
    const renderSingleLineChart = (echart, id, data) => {
        const domData = echart.getDom().dataset
        // 指定图表的配置项和数据Ï
        const option = {
            ...defaultOptions,
            title: {
                ...plotTitleStyle,
                text: domData.plotTitle,
            },
            tooltip: {
                trigger: "axis",
            },
            grid: {
                // left: data.yT,
                bottom: 80,
                containLabel: true,
            },
            xAxis: {
                ...axisTextStyle,
                name: domData.plotXTitle,
                nameGap: 30,
                type: "category",
                boundaryGap: false,
                data: data.x,
            },
            yAxis: {
                ...axisTextStyle,
                name: domData.plotYTitle,
                type: "value",
                nameGap: data.yTitleGap,
                axisLine: {
                    show: true,
                },
                axisTick: {
                    show: true,
                    inslide: false,
                },
                data: data.y
            },
            series: [
                {
                    type: "line",
                    data: data.y,
                    lineStyle: {
                        width: 2,
                        color: id.includes('LenDis') ? "#73c0de": "#5470c6",
                    },
                    showSymbol: false,
                }
            ],
        };
        // 使用刚指定的配置项和数据显示图表。
        echart.setOption(option);
    }
    const plotElements = document.querySelectorAll(".plot");
    plotElements.forEach((plotElement) => {
        const id = plotElement.id;
        const plotData = data[id];
        let renderer = 'cavas' // or svg
        if (renderer === 'svg') {
            defaultOptions.toolbox.feature.saveAsImage.show = true
            defaultOptions.toolbox.feature.mySave.show = false
        }
        const myChart = echarts.init(plotElement, null, { renderer });
        if (plotData.y[0] instanceof Object) {
            renderMultLineChart(myChart, id, plotData);
        } else {
            renderSingleLineChart(myChart, id, plotData);
        }
    });
</script>)";
}

void genHtmlHeader(ofstream &ofs)
{
    ofs << "<head>\n";
    ofs << "<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\" />\n";
    ofs << "<title>TGSFilter Report</title>\n";
    genHTMLStyle(ofs);
    ofs << "</head>\n";
}

// 生成报告的title
void genReportTitle(ofstream &ofs)
{
    ofs << "<h1 style=\"text-align: left\">\n";
    ofs << "<a href=\"https://github.com/HuiyangYu/TGSFilter\" target=\"blank\" class=\"report-title\">TGSFilter Report</a>\n";
    ofs << "</h1>\n";
}

string genHTMLAttr(string key, string value)
{
    return key + "=\"" + value + "\" ";
}

bool includes(const std::string &str, const std::string &subStr)
{
    return str.find(subStr) != std::string::npos;
}

string getPlotTitle(string& id, string &qcType) {   
    if (qcType[1] != '0'){
        if (includes(id, "raw")) {
            return "Before filtering";
        }
        if (includes(id, "clean")) {
            return "After filtering";
        }
        if (includes(id, "down")){
            return "After downsampling";
        }
    }
    return "";
}

string getYAxisTitle(string& id)
{
    if (includes(id, "QualDis"))
    {
        return "Base ratio(%)";
    }
    if (includes(id, "LenDis"))
    {
        return "Reads number";
    }
    if (includes(id, "ReadsQual"))
    {
        return "Quality score";
    }
    if (includes(id, "BasesContents"))
    {
        return "Percent of base contents(%)";
    }
    return "";
}

string getXAxisTitle(string& id)
{
    if (includes(id, "LenDis"))
    {
        return "Read length (bp)";
    }
    if (includes(id, "QualDis"))
    {
        return "Quailty score of read";
    }
    if (includes(id, "5p"))
    {
        return "Position in read from start (bp)";
    }
    if (includes(id, "3p"))
    {
        return "Position in read from end (bp)";
    }
    return "Position in read (bp)";
}

// 生成selection的html
void genSelectionHTML(ofstream &ofs, string &qcType, string title, vector<string> ids)
{
    ofs << "<div class=\"level-2-title\">" << title << "</div>";
    ofs << "<div class=\"plots-container\" >";
    for (string id : ids)
    {
        ofs << "    <div class=\"plot\" ";
        ofs << genHTMLAttr("id", id);
        ofs << genHTMLAttr("data-title", title);
        ofs << genHTMLAttr("data-plot-title", getPlotTitle(id, qcType));
        ofs << genHTMLAttr("data-plot-x-title", getXAxisTitle(id));
        ofs << genHTMLAttr("data-plot-y-title", getYAxisTitle(id));
        ofs << " ></div>";
    }
    ofs << "</div>";
}

// 生成画图片html片段的数据
vector<Selection> getSelectionsData(string &qcType)
{

    vector<Selection> selections;

    Selection selection1, selection2, selection3, selection4;
    Selection selection5, selection6, selection7, selection8;

    selection1.title = "Read length distribution";
    selection2.title = "Quality distribution";
    selection3.title = "Reads quality";
    selection4.title = "Quality of reads 5'";
    selection5.title = "Quality of reads 3'";
    selection6.title = "Base contents";
    selection7.title = "Base contents of reads 5'";
    selection8.title = "Base contents of reads 3'";

    if (qcType[1] != '1'){
        selection1.ids.push_back("rawLenDis");
        selection6.ids.push_back("rawBasesContents");
        selection7.ids.push_back("raw5pBasesContents");
        selection8.ids.push_back("raw3pBasesContents");
        if (qcType[0] == '1'){
            selection2.ids.push_back("rawQualDis");
            selection3.ids.push_back("rawReadsQual");
            selection4.ids.push_back("raw5pReadsQual");
            selection5.ids.push_back("raw3pReadsQual");
        }
    }

    if (qcType[1] != '0'){
        selection1.ids.push_back("cleanLenDis");
        selection6.ids.push_back("cleanBasesContents");
        selection7.ids.push_back("clean5pBasesContents");
        selection8.ids.push_back("clean3pBasesContents");
        if (qcType[0] == '1'){
            selection2.ids.push_back("cleanQualDis");
            selection3.ids.push_back("cleanReadsQual");
            selection4.ids.push_back("clean5pReadsQual");
            selection5.ids.push_back("clean3pReadsQual");
        }
    }

    if (qcType[0] == '1'){
        selections.push_back(selection1);
        selections.push_back(selection2);
        selections.push_back(selection3);
        selections.push_back(selection4);
        selections.push_back(selection5);
        selections.push_back(selection6);
        selections.push_back(selection7);
        selections.push_back(selection8);
    }else{
        selections.push_back(selection1);
        selections.push_back(selection6);
        selections.push_back(selection7);
        selections.push_back(selection8);
    }
    

    return selections;
}

int getMaxY(LenDisData &data)
{
    int maxY = 0;
    for (auto &value : data.y)
    {
        if (value > maxY)
        {
            maxY = value;
        }
    }
    return maxY;
}

int getMaxY(QualDisData &data)
{
    int maxY = 0;
    for (auto &value : data.y)
    {
        if (value > maxY)
        {
            maxY = value;
        }
    }
    return maxY;
}

int getMaxY(LinePlotData &data)
{
    int maxY = 0;
    for (auto &item : data.y)
    {
        for (auto &value : item.data)
        {
            if (value > maxY)
            {
                maxY = value;
            }
        }
    }
    return maxY;
}

int getYTitleGap(int maxY)
{
    int size = 0;
    string maxYStr = to_string(maxY);
    size += maxYStr.length();
    for (size_t i = 3; i < maxYStr.length(); i += 3)
    {
        size += 1;
    }
    return size * 5 + 30;
}

void genJSKey2Object(ofstream &ofs, string key, LenDisData &values)
{
    ofs << "" << key << ": {";
    ofs << "x: " << vectorNumToJson(values.x) << ",\n";
    ofs << "y: " << vectorNumToJson(values.y) << ",\n";
    ofs << "yTitleGap: " << getYTitleGap(getMaxY(values)) << ",\n";
    ofs << "},\n";
}

void genJSKey2Object(ofstream &ofs, string key, QualDisData &values)
{
    ofs << "" << key << ": {";
    ofs << "x: " << vectorNumToJson(values.x) << ",\n";
    ofs << "y: " << vectorNumToJson(values.y) << ",\n";
    ofs << "yTitleGap: " << getYTitleGap(getMaxY(values)) << ",\n";
    ofs << "},\n";
}

void genJSKey2Object(ofstream &ofs, string key, LinePlotData &values)
{
    ofs << "" << key << ": {";
    ofs << "x: " << vectorNumToJson(values.x) << ",";
    ofs << "y: [";
    for (auto &item : values.y)
    {
        ofs << "{";
        ofs << "name:\"" << item.bases << "\", ";
        ofs << "data:" << vectorNumToJson(item.data) << ", ";
        ofs << "}, ";
    }
    ofs << "], ";
    ofs << "yTitleGap:" << getYTitleGap(getMaxY(values)) << ", ";
    ofs << "},";
}

void genPlotData(ofstream &ofs, string &qcType, PlotData &data)
{
    ofs << "<script>\n";
    ofs << "var data = {\n";
    if (qcType[1] != '1'){
        genJSKey2Object(ofs, "rawLenDis", data.rawLenDis);
        genJSKey2Object(ofs, "rawBasesContents", data.rawBasesContents);
        genJSKey2Object(ofs, "raw5pBasesContents", data.raw5pBasesContents);
        genJSKey2Object(ofs, "raw3pBasesContents", data.raw3pBasesContents);
        if (qcType[0] == '1'){ //fastq
            genJSKey2Object(ofs, "rawQualDis", data.rawQualDis);
            genJSKey2Object(ofs, "rawReadsQual", data.rawReadsQual);
            genJSKey2Object(ofs, "raw5pReadsQual", data.raw5pReadsQual);
            genJSKey2Object(ofs, "raw3pReadsQual", data.raw3pReadsQual);
        }
    }

    if (qcType[1] != '0'){
        genJSKey2Object(ofs, "cleanLenDis", data.cleanLenDis);
        genJSKey2Object(ofs, "cleanBasesContents", data.cleanBasesContents);
        genJSKey2Object(ofs, "clean5pBasesContents", data.clean5pBasesContents);
        genJSKey2Object(ofs, "clean3pBasesContents", data.clean3pBasesContents);
        if (qcType[0] == '1'){ //fastq
            genJSKey2Object(ofs, "cleanQualDis", data.cleanQualDis);
            genJSKey2Object(ofs, "cleanReadsQual", data.cleanReadsQual);
            genJSKey2Object(ofs, "clean5pReadsQual", data.clean5pReadsQual);
            genJSKey2Object(ofs, "clean3pReadsQual", data.clean3pReadsQual);
        }
    }

    ofs << "}\n";
    ofs << "</script>\n";
}

void genTableTrTd(ofstream &ofs, string &qcType, string value1, string value2, string value3)
{
    ofs << "<tr>\n";
    ofs << "    <td>" << value1 << "</td>\n";

    if (qcType[1] != '1'){
        ofs << "    <td>" << value2 << "</td>\n";
    }

    if (qcType[1] != '0'){
        ofs << "    <td>" << value3 << "</td>\n";
    }

    ofs << "</tr>\n";
}

void genTable(ofstream &ofs, string &qcType, vector<vector<string>> &tabInfo)
{
    ofs << "<table>\n";
    if (qcType[1] == '0'){
        genTableTrTd(ofs, qcType, "", "Value", "After filtering");
    }else{
        genTableTrTd(ofs, qcType, "", "Before filtering", "After filtering");
    }
    genTableTrTd(ofs, qcType, "Total reads", tabInfo[0][0], tabInfo[0][1]);
    genTableTrTd(ofs, qcType, "Total bases", tabInfo[1][0], tabInfo[1][1]);
    genTableTrTd(ofs, qcType, "GC content (%)", tabInfo[2][0], tabInfo[2][1]);
    genTableTrTd(ofs, qcType, "Min length (bp)", tabInfo[3][0], tabInfo[3][1]);
    genTableTrTd(ofs, qcType, "Max length (bp)", tabInfo[4][0], tabInfo[4][1]);
    genTableTrTd(ofs, qcType, "Mean length (bp)", tabInfo[5][0], tabInfo[5][1]);
    genTableTrTd(ofs, qcType, "Median length (bp)", tabInfo[6][0], tabInfo[6][1]);
    genTableTrTd(ofs, qcType, "N50 length (bp)", tabInfo[7][0], tabInfo[7][1]);
    if (qcType[0]=='1'){
        genTableTrTd(ofs, qcType, "Mean quality", tabInfo[8][0], tabInfo[8][1]);
    }
    
    ofs << "</table>\n";
}

void genHTMLReport(ofstream &ofs, string &qcType, function<void(ofstream &ofs)> genTable, function<void(ofstream &ofs)> genJSData)
{
    ofs << "<html  lang=\"en\">\n";
    genHtmlHeader(ofs);
    ofs << "<body>\n";
    ofs << "<div id=\"container\">\n";
    genReportTitle(ofs);
    // 生成表格
    ofs << "<div class=\"level-2-title\">Summary</div>\n";
    ofs << "<div>\n";
    genTable(ofs);
    ofs << "</div>\n";

    // 生成html片段, qcType: 00, 01, 02 for fasta, 11, 12, 13 for fastq
    vector<Selection> selectionData = getSelectionsData(qcType);
    for (Selection selection : selectionData)
    {
        genSelectionHTML(ofs, qcType, selection.title, selection.ids);
    }
    ofs << "</div>\n";

    genHTMLFooter(ofs);
    ofs << "</body>\n";
    // 生成数据
    ofs << getDrawPlotJs();
    ofs << getChangeDpiJs();
    genJSData(ofs);
    genBaseJsScript(ofs);

    ofs << "</html>\n";
}
